# Generated by Django 3.2.11 on 2022-04-07 10:30

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': 'Пользователь с указанным username уже существует.'}, max_length=150, unique=True, verbose_name='Логин')),
                ('first_name', models.CharField(max_length=150, verbose_name='Имя пользователя')),
                ('last_name', models.CharField(max_length=150, verbose_name='Фамилия пользователя')),
                ('email', models.EmailField(error_messages={'unique': 'Пользователь с указанным e-mail уже существует.'}, max_length=254, unique=True, verbose_name='Адрес e-mail')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ('username',),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Subscribe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='author', to=settings.AUTH_USER_MODEL, verbose_name='Автор, на которого подписывается подписчик')),
                ('user_subscriber', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriber', to=settings.AUTH_USER_MODEL, verbose_name='Подписчик')),
            ],
            options={
                'verbose_name': 'Подписка',
                'verbose_name_plural': 'Подписки',
                'ordering': ('user_subscriber',),
            },
        ),
        migrations.AddConstraint(
            model_name='subscribe',
            constraint=models.UniqueConstraint(fields=('user_subscriber', 'user_author'), name='unique_subscribe'),
        ),
        migrations.RemoveConstraint(
            model_name='subscribe',
            name='unique_subscribe',
        ),
        migrations.AddField(
            model_name='user',
            name='favorite_recipes',
            field=models.ManyToManyField(related_name='favorites', to='recipes.Recipe', verbose_name='Избранные рецепты'),
        ),
        migrations.AddField(
            model_name='user',
            name='shopping_recipes',
            field=models.ManyToManyField(related_name='shoppings', to='recipes.Recipe', verbose_name='Рецепты в списке покупок'),
        ),
        migrations.AddField(
            model_name='user',
            name='subscribers',
            field=models.ManyToManyField(related_name='subscribing', through='users.Subscribe', to=settings.AUTH_USER_MODEL, verbose_name='Подписчики'),
        ),
        migrations.AlterField(
            model_name='user',
            name='password',
            field=models.CharField(max_length=150, verbose_name='Пароль'),
        ),
        migrations.AddConstraint(
            model_name='subscribe',
            constraint=models.UniqueConstraint(fields=('user_subscriber', 'user_author'), name='уникальность пары подписчик-автор'),
        ),
        migrations.AddConstraint(
            model_name='subscribe',
            constraint=models.CheckConstraint(check=models.Q(('user_subscriber', django.db.models.expressions.F('user_author')), _negated=True), name='запрет подписки на самого себя'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(fields=('username', 'email'), name='уникальность пары имя пользователя-адрес email'),
        ),
        migrations.RemoveField(
            model_name='user',
            name='subscribers',
        ),
        migrations.AddField(
            model_name='user',
            name='subscribing',
            field=models.ManyToManyField(through='users.Subscribe', to=settings.AUTH_USER_MODEL, verbose_name='Подписчики'),
        ),
        migrations.AlterModelOptions(
            name='subscribe',
            options={'ordering': ('user',), 'verbose_name': 'Подписка', 'verbose_name_plural': 'Подписки'},
        ),
        migrations.RemoveConstraint(
            model_name='subscribe',
            name='уникальность пары подписчик-автор',
        ),
        migrations.RemoveConstraint(
            model_name='subscribe',
            name='запрет подписки на самого себя',
        ),
        migrations.RenameField(
            model_name='subscribe',
            old_name='user_subscriber',
            new_name='user',
        ),
        migrations.AddConstraint(
            model_name='subscribe',
            constraint=models.UniqueConstraint(fields=('user', 'user_author'), name='уникальность пары подписчик-автор'),
        ),
        migrations.AddConstraint(
            model_name='subscribe',
            constraint=models.CheckConstraint(check=models.Q(('user', django.db.models.expressions.F('user_author')), _negated=True), name='запрет подписки на самого себя'),
        ),
    ]
